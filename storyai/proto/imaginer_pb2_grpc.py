# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import imaginer_pb2 as imaginer__pb2


class DiffuserStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Diffuse = channel.unary_unary(
                '/imaginer.Diffuser/Diffuse',
                request_serializer=imaginer__pb2.DiffuseReq.SerializeToString,
                response_deserializer=imaginer__pb2.DiffuseResp.FromString,
                )


class DiffuserServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Diffuse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DiffuserServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Diffuse': grpc.unary_unary_rpc_method_handler(
                    servicer.Diffuse,
                    request_deserializer=imaginer__pb2.DiffuseReq.FromString,
                    response_serializer=imaginer__pb2.DiffuseResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'imaginer.Diffuser', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Diffuser(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Diffuse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/imaginer.Diffuser/Diffuse',
            imaginer__pb2.DiffuseReq.SerializeToString,
            imaginer__pb2.DiffuseResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DreamBoothControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateBooth = channel.unary_unary(
                '/imaginer.DreamBoothController/CreateBooth',
                request_serializer=imaginer__pb2.CreateBoothReq.SerializeToString,
                response_deserializer=imaginer__pb2.CreateBoothResp.FromString,
                )
        self.UpdateBooth = channel.unary_unary(
                '/imaginer.DreamBoothController/UpdateBooth',
                request_serializer=imaginer__pb2.UpdateBoothReq.SerializeToString,
                response_deserializer=imaginer__pb2.UpdateBoothResp.FromString,
                )
        self.GetBooth = channel.unary_unary(
                '/imaginer.DreamBoothController/GetBooth',
                request_serializer=imaginer__pb2.GetBoothReq.SerializeToString,
                response_deserializer=imaginer__pb2.GetBoothResp.FromString,
                )
        self.TryBeginTraining = channel.unary_unary(
                '/imaginer.DreamBoothController/TryBeginTraining',
                request_serializer=imaginer__pb2.TryBeginTrainingReq.SerializeToString,
                response_deserializer=imaginer__pb2.TryBeginTrainingResp.FromString,
                )
        self.EndTraining = channel.unary_unary(
                '/imaginer.DreamBoothController/EndTraining',
                request_serializer=imaginer__pb2.EndTrainingReq.SerializeToString,
                response_deserializer=imaginer__pb2.EndTrainingResp.FromString,
                )
        self.PreProcess = channel.unary_unary(
                '/imaginer.DreamBoothController/PreProcess',
                request_serializer=imaginer__pb2.PreProcessReq.SerializeToString,
                response_deserializer=imaginer__pb2.PreProcessResp.FromString,
                )


class DreamBoothControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateBooth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBooth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBooth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TryBeginTraining(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndTraining(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PreProcess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DreamBoothControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateBooth': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBooth,
                    request_deserializer=imaginer__pb2.CreateBoothReq.FromString,
                    response_serializer=imaginer__pb2.CreateBoothResp.SerializeToString,
            ),
            'UpdateBooth': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBooth,
                    request_deserializer=imaginer__pb2.UpdateBoothReq.FromString,
                    response_serializer=imaginer__pb2.UpdateBoothResp.SerializeToString,
            ),
            'GetBooth': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBooth,
                    request_deserializer=imaginer__pb2.GetBoothReq.FromString,
                    response_serializer=imaginer__pb2.GetBoothResp.SerializeToString,
            ),
            'TryBeginTraining': grpc.unary_unary_rpc_method_handler(
                    servicer.TryBeginTraining,
                    request_deserializer=imaginer__pb2.TryBeginTrainingReq.FromString,
                    response_serializer=imaginer__pb2.TryBeginTrainingResp.SerializeToString,
            ),
            'EndTraining': grpc.unary_unary_rpc_method_handler(
                    servicer.EndTraining,
                    request_deserializer=imaginer__pb2.EndTrainingReq.FromString,
                    response_serializer=imaginer__pb2.EndTrainingResp.SerializeToString,
            ),
            'PreProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.PreProcess,
                    request_deserializer=imaginer__pb2.PreProcessReq.FromString,
                    response_serializer=imaginer__pb2.PreProcessResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'imaginer.DreamBoothController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DreamBoothController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateBooth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/imaginer.DreamBoothController/CreateBooth',
            imaginer__pb2.CreateBoothReq.SerializeToString,
            imaginer__pb2.CreateBoothResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateBooth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/imaginer.DreamBoothController/UpdateBooth',
            imaginer__pb2.UpdateBoothReq.SerializeToString,
            imaginer__pb2.UpdateBoothResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBooth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/imaginer.DreamBoothController/GetBooth',
            imaginer__pb2.GetBoothReq.SerializeToString,
            imaginer__pb2.GetBoothResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TryBeginTraining(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/imaginer.DreamBoothController/TryBeginTraining',
            imaginer__pb2.TryBeginTrainingReq.SerializeToString,
            imaginer__pb2.TryBeginTrainingResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndTraining(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/imaginer.DreamBoothController/EndTraining',
            imaginer__pb2.EndTrainingReq.SerializeToString,
            imaginer__pb2.EndTrainingResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PreProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/imaginer.DreamBoothController/PreProcess',
            imaginer__pb2.PreProcessReq.SerializeToString,
            imaginer__pb2.PreProcessResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
